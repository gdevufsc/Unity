//Objeto: player
/*
 * limiteInferior = -2
 * 
*/

using UnityEngine;
using System.Collections;

public class touchInput : MonoBehaviour {

	public float playerSpeed;

	/// <summary>
	/// Posicao de criacao dos projeteis, equivale a posicao do personagem principal
	/// </summary>
	Vector3 spawnPosition;

	/// <summary>
	/// position of the touch 
	/// </summary>
	private Vector3 _guiPosition;

	public float reloadTime;
	float timer = 0;

	public float limiteInferior;

	public GameObject goPrefab;

	int score = 0;
	int bullets = 0;

	// Use this for initialization
	void Start () {
	}
	
	// Update is called once per frame
	void Update () {
		spawnPosition = this.gameObject.transform.position;

		if (this.gameObject.transform.position.y < limiteInferior){
			float aux = this.gameObject.transform.position.x;
			this.gameObject.transform.position = new Vector3(aux,limiteInferior + 0.2f,0);
			this.gameObject.GetComponent<Rigidbody>().velocity = new Vector3(0,playerSpeed,0);
		}

		int touchCount = 0;
		foreach (Touch touch in Input.touches){

			float touchPositionX = touch.position.x;
			float touchPositionY = touch.position.y;

			if (touch.phase != TouchPhase.Ended && touch.phase != TouchPhase.Canceled){
				//GameObject.FindGameObjectWithTag("score").GetComponent<GUIText>().text = touch.position.ToString();

				//grande botao esquerdo
				if(touch.position.x < 950 && touch.position.y < 800){
					this.gameObject.GetComponent<Rigidbody>().velocity = new Vector3(0,playerSpeed,0);
				}

				//grande botao direito
				else if(touch.position.x > 950 && touch.position.y < 800){
					if (timer >= reloadTime) {
						//				int x = Random.Range (-2,2);
						//				int y = Random.Range (-3,2);
						//				int z = Random.Range (-1,1);
						//				Instantiate (goPrefab, new Vector3 (x,y,z), Quaternion.identity);
						if(true/*x < 20*/) {
							GameObject clone = (GameObject)Instantiate (goPrefab, spawnPosition, Quaternion.identity);
							clone.AddComponent(typeof(projectileBehaviour));
							bullets++;
						}
						timer = 0;
						score += Random.Range (10,100);
						GameObject.FindGameObjectWithTag("score").GetComponent<GUIText>().text = score.ToString();
					}
				}
			}
			if (timer < reloadTime) {
				timer+= Time.deltaTime;
			}
		}
	}
	/*
	public void CheckTouch()
	{
		// if a touch began
		if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began) 
		{
			// if there is a delegate assigned to handle the input
			if (_touchPadDelegate != null)
			{
				// if position is in bounds
				if (GetTouchPosition(out _guiPosition, out _worldPosition))
//guiPosition = guiCamera.ScreenToWorldPoint(Input.mousePosition);
				{
					// call the delegate with the touch down event and position
					_touchPadDelegate(TOUCH_EVENT.TouchDown, Input.mousePosition, _guiPosition, _worldPosition);
				}
			}				
		}			
		else if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Ended) 
		{
			// else if the touch ended
			
			// if delegate exists, call the touch up event
			if (_touchPadDelegate != null)
				if (GetTouchPosition(out _guiPosition, out _worldPosition))
			{
				_touchPadDelegate(TOUCH_EVENT.TouchUp, Input.mousePosition, _guiPosition, _worldPosition);
			}
		}
		else if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Moved) 
		{
			// else the touch moved
			
			// if delegate exists and the touch is in bounds, then call the touch move event
			if (_touchPadDelegate != null)
				if (GetTouchPosition(out _guiPosition, out _worldPosition))
			{
				_touchPadDelegate(TOUCH_EVENT.TouchMove, Input.mousePosition, _guiPosition, _worldPosition);
			}
		}
		
		else if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Stationary)
		{
			// else touch is stationary
			
			// if delegate exists and the touch is in bounds, then call the touch move event
			if (_touchPadDelegate != null)
				if (GetTouchPosition(out _guiPosition, out _worldPosition))
			{
				_touchPadDelegate(TOUCH_EVENT.TouchStationary, Input.mousePosition, _guiPosition, _worldPosition);
			}
		}
	}*/
}
